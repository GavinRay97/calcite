/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.calcite.util

import com.google.common.collect.ImmutableList

/**
 * An immutable list that may contain null values.
 *
 *
 * If the list cannot contain null values, use
 * [com.google.common.collect.ImmutableList].
 *
 * @param <E> Element type
</E> */
class ImmutableNullableList<E>  // private - does not copy array
private constructor(private val elements: Array<E>) : AbstractList<E>() {
    @Override
    operator fun get(index: Int): E {
        return elements[index]
    }

    @Override
    fun size(): Int {
        return elements.size
    }

    /**
     * A builder for creating immutable nullable list instances.
     *
     * @param <E> element type
    </E> */
    class Builder<E>
    /**
     * Creates a new builder. The returned builder is equivalent to the builder
     * generated by
     * [org.apache.calcite.util.ImmutableNullableList.builder].
     */
    {
        private val contents: List<E> = ArrayList()

        /**
         * Adds `element` to the `ImmutableNullableList`.
         *
         * @param element the element to add
         * @return this `Builder` object
         */
        fun add(element: E): Builder<E> {
            contents.add(element)
            return this
        }

        /**
         * Adds each element of `elements` to the
         * `ImmutableNullableList`.
         *
         * @param elements the `Iterable` to add to the
         * `ImmutableNullableList`
         * @return this `Builder` object
         * @throws NullPointerException if `elements` is null
         */
        fun addAll(elements: Iterable<E>?): Builder<E> {
            Iterables.addAll(contents, elements)
            return this
        }

        /**
         * Adds each element of `elements` to the
         * `ImmutableNullableList`.
         *
         * @param elements the elements to add to the `ImmutableNullableList`
         * @return this `Builder` object
         * @throws NullPointerException if `elements` is null
         */
        fun add(vararg elements: E): Builder<E> {
            for (element in elements) {
                add(element)
            }
            return this
        }

        /**
         * Adds each element of `elements` to the
         * `ImmutableNullableList`.
         *
         * @param elements the elements to add to the `ImmutableNullableList`
         * @return this `Builder` object
         * @throws NullPointerException if `elements` is null
         */
        fun addAll(elements: Iterator<E>?): Builder<E> {
            Iterators.addAll(contents, elements)
            return this
        }

        /**
         * Returns a newly-created `ImmutableNullableList` based on the
         * contents of the `Builder`.
         */
        fun build(): List<E> {
            return copyOf<Any>(contents)
        }
    }

    companion object {
        private val SINGLETON_NULL: List = Collections.singletonList(null)

        /**
         * Returns an immutable list containing the given elements, in order.
         *
         *
         * Behavior as
         * [com.google.common.collect.ImmutableList.copyOf]
         * except that this list allows nulls.
         */
        fun <E> copyOf(elements: Collection<E>): List<E> {
            if (elements is ImmutableNullableList<*>
                || elements is ImmutableList
                || elements === SINGLETON_NULL
            ) {
                return elements as List<E>
            }
            if (elements === Collections.EMPTY_LIST) {
                return ImmutableList.of()
            }
            // If there are no nulls, ImmutableList is better.
            for (`object` in elements) {
                if (`object` == null) {
                    val objects: Array<Object> = elements.toArray()
                    return ImmutableNullableList(objects as Array<E>)
                }
            }
            return ImmutableList.copyOf(elements)
        }

        /**
         * Returns an immutable list containing the given elements, in order.
         *
         *
         * Behavior as
         * [com.google.common.collect.ImmutableList.copyOf]
         * except that this list allows nulls.
         */
        fun <E> copyOf(elements: Iterable<E>): List<E?> {
            if (elements is ImmutableNullableList<*>
                || elements is ImmutableList
                || elements === SINGLETON_NULL
            ) {
                return elements as List<E>
            }
            if (elements is Collection) {
                return copyOf<Any>(elements)
            }
            // If there are no nulls, ImmutableList is better.
            val list: List<E?> = ArrayList()
            Iterables.addAll(list, elements)
            return if (list.contains(null)) {
                copyOf<Any?>(list)
            } else ImmutableList.copyOf(elements)
        }

        /**
         * Returns an immutable list containing the given elements, in order.
         *
         *
         * Behavior as
         * [com.google.common.collect.ImmutableList.copyOf]
         * except that this list allows nulls.
         */
        fun <E> copyOf(elements: Array<E>): List<E> {
            // Check for nulls.
            for (`object` in elements) {
                if (`object` == null) {
                    return ImmutableNullableList<E>(elements.clone())
                }
            }
            // There are no nulls. ImmutableList is better.
            return ImmutableList.copyOf(elements)
        }

        /** Creates an immutable list of 1 element.  */
        fun <E> of(@Nullable e1: E?): List<E> {
            return if (e1 == null) SINGLETON_NULL else ImmutableList.of(e1)
        }

        /** Creates an immutable list of 2 elements.  */
        fun <E> of(e1: E, e2: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2)
        }

        /** Creates an immutable list of 3 elements.  */
        fun <E> of(e1: E, e2: E, e3: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2, e3)
        }

        /** Creates an immutable list of 4 elements.  */
        fun <E> of(e1: E, e2: E, e3: E, e4: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2, e3, e4)
        }

        /** Creates an immutable list of 5 elements.  */
        fun <E> of(e1: E, e2: E, e3: E, e4: E, e5: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2, e3, e4, e5)
        }

        /** Creates an immutable list of 6 elements.  */
        fun <E> of(e1: E, e2: E, e3: E, e4: E, e5: E, e6: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2, e3, e4, e5, e6)
        }

        /** Creates an immutable list of 7 elements.  */
        fun <E> of(e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E): List<E> {
            // Only we can see the varargs array. Therefore the list is immutable.
            return UnmodifiableArrayList.of(e1, e2, e3, e4, e5, e6, e7)
        }

        /** Creates an immutable list of 8 or more elements.  */
        fun <E> of(
            e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E,
            vararg others: E
        ): List<E?> {
            @SuppressWarnings("unchecked") val array = arrayOfNulls<Object>(8 + others.size) as Array<E?>
            array[0] = e1
            array[1] = e2
            array[2] = e3
            array[3] = e4
            array[4] = e5
            array[5] = e6
            array[6] = e7
            array[7] = e8
            System.arraycopy(others, 0, array, 8, others.size)
            return ImmutableNullableList(array)
        }

        /**
         * Returns a new builder. The generated builder is equivalent to the builder
         * created by the [Builder] constructor.
         */
        fun <E> builder(): Builder<E> {
            return Builder()
        }
    }
}
